# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ResourceTagArgs', 'ResourceTag']

@pulumi.input_type
class ResourceTagArgs:
    def __init__(__self__, *,
                 resource_arn: pulumi.Input[str],
                 tag: pulumi.Input['TagArgs']):
        """
        The set of arguments for constructing a ResourceTag resource.
        """
        ResourceTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            resource_arn=resource_arn,
            tag=tag,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             resource_arn: pulumi.Input[str],
             tag: pulumi.Input['TagArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("resource_arn", resource_arn)
        _setter("tag", tag)

    @property
    @pulumi.getter(name="resourceARN")
    def resource_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_arn")

    @resource_arn.setter
    def resource_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_arn", value)

    @property
    @pulumi.getter
    def tag(self) -> pulumi.Input['TagArgs']:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: pulumi.Input['TagArgs']):
        pulumi.set(self, "tag", value)


class ResourceTag(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 resource_arn: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[pulumi.InputType['TagArgs']]] = None,
                 __props__=None):
        """
        Create a ResourceTag resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ResourceTagArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ResourceTag resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ResourceTagArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResourceTagArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            ResourceTagArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 resource_arn: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[pulumi.InputType['TagArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResourceTagArgs.__new__(ResourceTagArgs)

            if resource_arn is None and not opts.urn:
                raise TypeError("Missing required property 'resource_arn'")
            __props__.__dict__["resource_arn"] = resource_arn
            if tag is not None and not isinstance(tag, TagArgs):
                tag = tag or {}
                def _setter(key, value):
                    tag[key] = value
                TagArgs._configure(_setter, **tag)
            if tag is None and not opts.urn:
                raise TypeError("Missing required property 'tag'")
            __props__.__dict__["tag"] = tag
        super(ResourceTag, __self__).__init__(
            'awstags:aws:ResourceTag',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'ResourceTag':
        """
        Get an existing ResourceTag resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ResourceTagArgs.__new__(ResourceTagArgs)

        __props__.__dict__["resource_arn"] = None
        __props__.__dict__["tag"] = None
        return ResourceTag(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="resourceARN")
    def resource_arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "resource_arn")

    @property
    @pulumi.getter
    def tag(self) -> pulumi.Output['outputs.Tag']:
        return pulumi.get(self, "tag")


// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aws

import (
	"context"
	"reflect"

	"errors"
	"github.com/nitrictech/pulumi-awstags-native/sdk/v3/go/awstags/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type ResourceTag struct {
	pulumi.CustomResourceState

	ResourceARN pulumi.StringOutput `pulumi:"resourceARN"`
	Tag         TagOutput           `pulumi:"tag"`
}

// NewResourceTag registers a new resource with the given unique name, arguments, and options.
func NewResourceTag(ctx *pulumi.Context,
	name string, args *ResourceTagArgs, opts ...pulumi.ResourceOption) (*ResourceTag, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceARN == nil {
		return nil, errors.New("invalid value for required argument 'ResourceARN'")
	}
	if args.Tag == nil {
		return nil, errors.New("invalid value for required argument 'Tag'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResourceTag
	err := ctx.RegisterResource("awstags:aws:ResourceTag", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceTag gets an existing ResourceTag resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceTag(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceTagState, opts ...pulumi.ResourceOption) (*ResourceTag, error) {
	var resource ResourceTag
	err := ctx.ReadResource("awstags:aws:ResourceTag", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceTag resources.
type resourceTagState struct {
}

type ResourceTagState struct {
}

func (ResourceTagState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceTagState)(nil)).Elem()
}

type resourceTagArgs struct {
	ResourceARN string `pulumi:"resourceARN"`
	Tag         Tag    `pulumi:"tag"`
}

// The set of arguments for constructing a ResourceTag resource.
type ResourceTagArgs struct {
	ResourceARN pulumi.StringInput
	Tag         TagInput
}

func (ResourceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceTagArgs)(nil)).Elem()
}

type ResourceTagInput interface {
	pulumi.Input

	ToResourceTagOutput() ResourceTagOutput
	ToResourceTagOutputWithContext(ctx context.Context) ResourceTagOutput
}

func (*ResourceTag) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceTag)(nil)).Elem()
}

func (i *ResourceTag) ToResourceTagOutput() ResourceTagOutput {
	return i.ToResourceTagOutputWithContext(context.Background())
}

func (i *ResourceTag) ToResourceTagOutputWithContext(ctx context.Context) ResourceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceTagOutput)
}

func (i *ResourceTag) ToOutput(ctx context.Context) pulumix.Output[*ResourceTag] {
	return pulumix.Output[*ResourceTag]{
		OutputState: i.ToResourceTagOutputWithContext(ctx).OutputState,
	}
}

// ResourceTagArrayInput is an input type that accepts ResourceTagArray and ResourceTagArrayOutput values.
// You can construct a concrete instance of `ResourceTagArrayInput` via:
//
//	ResourceTagArray{ ResourceTagArgs{...} }
type ResourceTagArrayInput interface {
	pulumi.Input

	ToResourceTagArrayOutput() ResourceTagArrayOutput
	ToResourceTagArrayOutputWithContext(context.Context) ResourceTagArrayOutput
}

type ResourceTagArray []ResourceTagInput

func (ResourceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceTag)(nil)).Elem()
}

func (i ResourceTagArray) ToResourceTagArrayOutput() ResourceTagArrayOutput {
	return i.ToResourceTagArrayOutputWithContext(context.Background())
}

func (i ResourceTagArray) ToResourceTagArrayOutputWithContext(ctx context.Context) ResourceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceTagArrayOutput)
}

func (i ResourceTagArray) ToOutput(ctx context.Context) pulumix.Output[[]*ResourceTag] {
	return pulumix.Output[[]*ResourceTag]{
		OutputState: i.ToResourceTagArrayOutputWithContext(ctx).OutputState,
	}
}

// ResourceTagMapInput is an input type that accepts ResourceTagMap and ResourceTagMapOutput values.
// You can construct a concrete instance of `ResourceTagMapInput` via:
//
//	ResourceTagMap{ "key": ResourceTagArgs{...} }
type ResourceTagMapInput interface {
	pulumi.Input

	ToResourceTagMapOutput() ResourceTagMapOutput
	ToResourceTagMapOutputWithContext(context.Context) ResourceTagMapOutput
}

type ResourceTagMap map[string]ResourceTagInput

func (ResourceTagMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceTag)(nil)).Elem()
}

func (i ResourceTagMap) ToResourceTagMapOutput() ResourceTagMapOutput {
	return i.ToResourceTagMapOutputWithContext(context.Background())
}

func (i ResourceTagMap) ToResourceTagMapOutputWithContext(ctx context.Context) ResourceTagMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceTagMapOutput)
}

func (i ResourceTagMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ResourceTag] {
	return pulumix.Output[map[string]*ResourceTag]{
		OutputState: i.ToResourceTagMapOutputWithContext(ctx).OutputState,
	}
}

type ResourceTagOutput struct{ *pulumi.OutputState }

func (ResourceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceTag)(nil)).Elem()
}

func (o ResourceTagOutput) ToResourceTagOutput() ResourceTagOutput {
	return o
}

func (o ResourceTagOutput) ToResourceTagOutputWithContext(ctx context.Context) ResourceTagOutput {
	return o
}

func (o ResourceTagOutput) ToOutput(ctx context.Context) pulumix.Output[*ResourceTag] {
	return pulumix.Output[*ResourceTag]{
		OutputState: o.OutputState,
	}
}

func (o ResourceTagOutput) ResourceARN() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceTag) pulumi.StringOutput { return v.ResourceARN }).(pulumi.StringOutput)
}

func (o ResourceTagOutput) Tag() TagOutput {
	return o.ApplyT(func(v *ResourceTag) TagOutput { return v.Tag }).(TagOutput)
}

type ResourceTagArrayOutput struct{ *pulumi.OutputState }

func (ResourceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceTag)(nil)).Elem()
}

func (o ResourceTagArrayOutput) ToResourceTagArrayOutput() ResourceTagArrayOutput {
	return o
}

func (o ResourceTagArrayOutput) ToResourceTagArrayOutputWithContext(ctx context.Context) ResourceTagArrayOutput {
	return o
}

func (o ResourceTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ResourceTag] {
	return pulumix.Output[[]*ResourceTag]{
		OutputState: o.OutputState,
	}
}

func (o ResourceTagArrayOutput) Index(i pulumi.IntInput) ResourceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourceTag {
		return vs[0].([]*ResourceTag)[vs[1].(int)]
	}).(ResourceTagOutput)
}

type ResourceTagMapOutput struct{ *pulumi.OutputState }

func (ResourceTagMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceTag)(nil)).Elem()
}

func (o ResourceTagMapOutput) ToResourceTagMapOutput() ResourceTagMapOutput {
	return o
}

func (o ResourceTagMapOutput) ToResourceTagMapOutputWithContext(ctx context.Context) ResourceTagMapOutput {
	return o
}

func (o ResourceTagMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ResourceTag] {
	return pulumix.Output[map[string]*ResourceTag]{
		OutputState: o.OutputState,
	}
}

func (o ResourceTagMapOutput) MapIndex(k pulumi.StringInput) ResourceTagOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourceTag {
		return vs[0].(map[string]*ResourceTag)[vs[1].(string)]
	}).(ResourceTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceTagInput)(nil)).Elem(), &ResourceTag{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceTagArrayInput)(nil)).Elem(), ResourceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceTagMapInput)(nil)).Elem(), ResourceTagMap{})
	pulumi.RegisterOutputType(ResourceTagOutput{})
	pulumi.RegisterOutputType(ResourceTagArrayOutput{})
	pulumi.RegisterOutputType(ResourceTagMapOutput{})
}
